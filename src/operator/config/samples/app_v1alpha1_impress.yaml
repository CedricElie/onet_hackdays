apiVersion: app.onet.bigtree.space/v1alpha1
kind: Impress
metadata:
  name: impress-sample
spec:
  # Default values copied from <project_dir>/helm-charts/docs/values.yaml
  backend:
    affinity: {}
    args: []
    celery:
      args:
      - celery
      - -A
      - impress.celery_app
      - worker
      - -l
      - INFO
      - -n
      - impress@%h
      command: []
      probes:
        liveness:
          exec:
            command:
            - /bin/sh
            - -c
            - celery -A impress.celery_app inspect ping -d impress@$HOSTNAME
          initialDelaySeconds: 60
          timeoutSeconds: 5
        readiness:
          exec:
            command:
            - /bin/sh
            - -c
            - celery -A impress.celery_app inspect ping -d impress@$HOSTNAME
          initialDelaySeconds: 15
          timeoutSeconds: 5
      replicas: 1
      resources: {}
    command: []
    createsuperuser:
      command:
      - /bin/sh
      - -c
      - |
        python manage.py createsuperuser --email $DJANGO_SUPERUSER_EMAIL --password $DJANGO_SUPERUSER_PASSWORD
      restartPolicy: Never
    dpAnnotations: {}
    envVars: {}
    extraVolumeMounts: []
    extraVolumes: []
    job:
      annotations:
        argocd.argoproj.io/hook: PostSync
      command: []
      name: ""
      restartPolicy: Never
    migrate:
      command:
      - python
      - manage.py
      - migrate
      - --no-input
      restartPolicy: Never
    migrateJobAnnotations: {}
    nodeSelector: {}
    pdb:
      enabled: true
    persistence: {}
    podAnnotations: {}
    probes:
      liveness:
        initialDelaySeconds: 10
        path: /__heartbeat__
      readiness:
        initialDelaySeconds: 10
        path: /__lbheartbeat__
    replicas: 1
    resources: {}
    securityContext: null
    service:
      annotations: {}
      port: 80
      targetPort: 8000
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: []
    themeCustomization:
      enabled: false
      file_content: ""
      mount_path: /app/impress/configuration/theme
    tolerations: []
  commonEnvVars: {}
  frontend:
    affinity: {}
    args: []
    command: []
    dpAnnotations: {}
    envVars: {}
    extraVolumeMounts: []
    extraVolumes: []
    image:
      pullPolicy: IfNotPresent
      repository: lasuite/impress-frontend
      tag: latest
    nodeSelector: {}
    pdb:
      enabled: true
    persistence: {}
    podAnnotations: {}
    probes: {}
    replicas: 1
    resources: {}
    securityContext: null
    service:
      annotations: {}
      port: 80
      targetPort: 8080
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: []
    tolerations: []
  fullnameOverride: ""
  image:
    pullPolicy: IfNotPresent
    repository: lasuite/impress-backend
    tag: latest
  ingress:
    className: null
    customBackends: []
    enabled: false
    host: impress.example.com
    hosts: []
    path: /
    tls:
      additional: []
      enabled: true
      secretName: null
  ingressAdmin:
    className: null
    enabled: false
    host: impress.example.com
    hosts: []
    path: /admin
    tls:
      additional: []
      enabled: true
      secretName: null
  ingressCollaborationApi:
    annotations:
      nginx.ingress.kubernetes.io/upstream-hash-by: $arg_room
    className: null
    customBackends: []
    enabled: false
    host: impress.example.com
    hosts: []
    path: /collaboration/api/
    tls:
      additional: []
      enabled: true
      secretName: null
  ingressCollaborationWS:
    annotations:
      nginx.ingress.kubernetes.io/enable-websocket: "true"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "86400"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "86400"
      nginx.ingress.kubernetes.io/upstream-hash-by: $arg_room
    className: null
    customBackends: []
    enabled: false
    host: impress.example.com
    hosts: []
    path: /collaboration/ws/
    tls:
      additional: []
      enabled: true
      secretName: null
  ingressMedia:
    annotations:
      nginx.ingress.kubernetes.io/auth-response-headers: Authorization, X-Amz-Date,
        X-Amz-Content-SHA256
      nginx.ingress.kubernetes.io/auth-url: https://impress.example.com/api/v1.0/documents/media-auth/
      nginx.ingress.kubernetes.io/configuration-snippet: |
        add_header Content-Security-Policy "default-src 'none'" always;
      nginx.ingress.kubernetes.io/upstream-vhost: minio.impress.svc.cluster.local:9000
    className: null
    enabled: false
    host: impress.example.com
    hosts: []
    path: /media/(.*)
    tls:
      additional: []
      enabled: true
      secretName: null
  nameOverride: ""
  postgresql:
    auth:
      database: impress
      password: pass
      username: dinum
    fullnameOverride: postgresql
    nameOverride: postgresql
    tls:
      autoGenerated: true
      enabled: true
  posthog:
    assetsService:
      annotations: {}
      externalName: eu-assets.i.posthog.com
      port: 443
      type: ExternalName
    ingress:
      annotations: {}
      className: null
      customBackends: []
      enabled: false
      host: impress.example.com
      hosts: []
      path: /
      tls:
        additional: []
        enabled: true
    ingressAssets:
      annotations: {}
      className: null
      customBackends: []
      enabled: false
      host: impress.example.com
      hosts: []
      paths:
      - /static
      - /array
      tls:
        additional: []
        enabled: true
    service:
      annotations: {}
      externalName: eu.i.posthog.com
      port: 443
      type: ExternalName
  serviceMedia:
    annotations: {}
    host: minio.impress.svc.cluster.local
    port: 9000
  yProvider:
    affinity: {}
    args: []
    command: []
    dpAnnotations: {}
    envVars: {}
    extraVolumeMounts: []
    extraVolumes: []
    image:
      pullPolicy: IfNotPresent
      repository: lasuite/impress-y-provider
      tag: latest
    nodeSelector: {}
    pdb:
      enabled: true
    persistence: {}
    podAnnotations: {}
    probes:
      liveness:
        initialDelaySeconds: 10
        path: /ping
    replicas: 1
    resources: {}
    securityContext: null
    service:
      annotations: {}
      port: 443
      targetPort: 4444
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: []
    tolerations: []
  
  
